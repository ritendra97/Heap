import java.util.*;
class Pair
{
	Integer value;
	Integer key;
	Pair(Integer key, Integer value)
	{
		this.key=key;
		this.value=value;
	}
	public Integer getvalue()
	{
		return value;
	}
	public Integer getkey()
	{
		return key;
	}
	public void setkey(Integer key)
	{
		this.key=key;
	}
	public void setvalue(Integer value)
	{
		this.value=value;
	}
}
public class Heap 
{
	 static void print_N_mostFrequentNumber(int[] arr, int n, int k)
	 {
		 PriorityQueue<Pair> minheap = new PriorityQueue<>(new Comparator<Pair>() {
			public int compare(Pair p1,Pair p2)
			{
				// minheap
				return p1.getvalue().compareTo(p2.getvalue());
			}
		 });
		 Map<Integer, Integer> mp = new HashMap<Integer, Integer>();
	     for (int i = 0; i < n; i++) 
	     {
	         mp.put(arr[i], mp.getOrDefault(arr[i], 0) + 1);
	     }
	     for(Map.Entry<Integer,Integer> en : mp.entrySet())
	     {
	    	 minheap.offer(new Pair(en.getKey(),en.getValue()));
	    	 if(minheap.size()>k)
	    	 {
	    		 minheap.poll();
	    	 }
	     }
	     while(!minheap.isEmpty())
	     {
	    	 System.out.println(minheap.peek().getkey());
	    	 minheap.poll();
	     }
	 }
	public static void main(String[] args) 
	{
		int arr[] = { 3, 1, 4, 4, 5, 2, 6, 1 };
        int n = arr.length;
        int k = 2;
        print_N_mostFrequentNumber(arr, n, k);
	}
}
